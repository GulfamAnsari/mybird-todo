{"version":3,"sources":["components/header/Header.js","components/tasks/Task.js","components/footer/Footer.js","components/add-task/AddTask.js","components/completed-task/CompletedTask.js","App.js","serviceWorker.js","index.js"],"names":["Header","react_default","a","createElement","className","Task","_ref","task","deleteTaskHandler","addCompletedTaskHandler","draggable","priority","toLowerCase","onClick","key","title","description","Footer","role","AddTask","openNewTodo","toggleTodoHandler","addNewTodoHandler","id","onSubmit","event","preventDefault","formElement","document","getElementById","elements","data","value","htmlFor","name","type","placeholder","rows","cols","CompletedTask","_this$props","this","props","completedTask","removeCompletedTaskHandler","Component","App","_this","Object","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","state","tasks","completed","setState","push","updateTaskState","index","splice","_this2","_this$state","onDragStart","console","log","map","AddTask_AddTask","bind","CompletedTask_CompletedTask","Boolean","window","location","hostname","match","ReactDOM","render","App_App","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.577a527d.chunk.js","sourcesContent":["import React from 'react';\nimport './Header';\n\nexport default function Header() {\n    return (\n        <header className=\"page-title\">\n            <h1>  <i className=\"material-icons\">view_list</i>\n                TODO</h1>\n            <div className=\"tag\"> An easy way to manage your work. <span className=\"caret\">|</span></div>\n        </header>\n    )\n}\n","import React from 'react'\n\nexport default function Task({ task, deleteTaskHandler, addCompletedTaskHandler }) {\n    return (\n        <li draggable=\"true\" className={'todo-item ' + task.priority.toLowerCase()}>\n            <div className=\"card\">\n                <h3 className=\"todo-title\">\n                    <span className=\"action\">\n                        <i className=\"material-icons md-36 icon-delete\" onClick={() => {deleteTaskHandler(task.key)}}>delete</i>\n                        <i className=\"icon-checkbox-outline material-icons md-36 md-dark\" onClick={() => {addCompletedTaskHandler(task.key)}}>check_box_outline_blank</i>\n                        <i className=\"icon-checkbox material-icons md-36 md-light\">check_box</i>\n                    </span>\n                    <span className=\"title\">{task.title} </span></h3>\n                <p className=\"todo-description\">\n                    {task.description} </p>\n                <span className=\"todo-priority\"> {task.priority} </span>\n            </div>\n        </li>\n    )\n}\n","import React from 'react'\n\nexport default function Footer() {\n    return (\n        <footer role=\"contentinfo\" className=\"footer\">\n            <i className=\"material-icons\">favorite</i>Made with love for MyBird TODO\n        </footer>\n    )\n}\n","import React from 'react';\nimport './AddTask.css';\n\nexport default function AddTask({ openNewTodo, toggleTodoHandler, addNewTodoHandler}) {\n\n    function onSubmitHandler(event) {\n        event.preventDefault();\n        var formElement = document.getElementById(\"todoForm\").elements;\n        const data = {\n            title: formElement[0].value,\n            description: formElement[1].value,\n            priority: formElement[2].value \n        }\n        addNewTodoHandler(data);\n    }\n\n    return (\n        <main role=\"main\" className={ openNewTodo ? 'main-wrap' : 'hidden'}>\n            <header role=\"heading\" className=\"header\">\n                <h1 className=\"app-header\"> Add your task <span className=\"close-add-task\" onClick={() => { toggleTodoHandler(false) }}>X</span></h1>\n            </header>\n            <section className=\"main-content\">\n                <section className=\"todo-form\">\n                    <form role=\"form\" id=\"todoForm\" onSubmit={onSubmitHandler}>\n                        <div className=\"row\">\n                            <label htmlFor=\"title\"> Title </label>\n                            <input className=\"form-input\" name=\"title\" id=\"title\" type=\"text\" placeholder=\"Learn JavaScript\" />\n                        </div>\n                        <div className=\"row\">\n                            <label htmlFor=\"description\"> Description </label>\n                            <textarea id=\"description\" name=\"description\" rows=\"4\" cols=\"30\" placeholder=\"Coz you already know Java\"></textarea>\n                        </div>\n                        <div className=\"row\">\n                            <label htmlFor=\"priority\"> Priority </label>\n                            <select id=\"priority\" name=\"priority\">\n                                <option value=\"high\">High</option>\n                                <option value=\"medium\">Medium</option>\n                                <option value=\"low\">Low</option>\n                            </select>\n                        </div>\n                        <div className=\"row submit-btn\">\n                            <input type=\"submit\" className=\"primary-button\" value=\"DO IT\" />\n                        </div>\n                    </form>\n                </section>\n            </section>\n        </main>\n    )\n}\n","import React, { Component } from 'react'\n\nexport default class CompletedTask extends Component {\n\n    render() {\n        const { completedTask, removeCompletedTaskHandler } = this.props;\n        return (\n            <li className={\"todo-item \" + completedTask.priority.toLowerCase()}>\n                <div className=\"icon-check\">\n                    <i className=\"pad-15 material-icons md-36 md-light\">check_circle</i>\n                </div>\n\n                <div className=\"icon-delete\">\n                    <i className=\"pad-15 material-icons md-36 md-light\" onClick={() => {removeCompletedTaskHandler(completedTask.key)}}>delete</i>\n                </div>\n                <div className=\"content\">\n                    {completedTask.title}\n                </div>\n            </li>\n        )\n    }\n}\n","import React, { Component } from 'react';\nimport './App.css';\nimport Header from './components/header/Header';\nimport Task from './components/tasks/Task';\nimport Footer from './components/footer/Footer';\nimport AddTask from './components/add-task/AddTask';\nimport CompletedTask from './components/completed-task/CompletedTask';\n\nexport default class App extends Component {\n\n  constructor() {\n    super();\n    this.state = {\n      tasks: [\n        {\n          title: 'Learn React',\n          description: 'Build great modularize javascript apps with React JS',\n          priority: 'High',\n          completed: true\n        },\n        {\n          title: 'Learn Angular',\n          description: 'Build great modularize javascript apps with React JS',\n          priority: 'High',\n          completed: false\n        },\n        {\n          title: 'Learn React Native',\n          description: 'Build great modularize javascript apps with React JS',\n          priority: 'Medium',\n          completed: true\n        },\n        {\n          title: 'Learn Android',\n          description: 'Build great modularize javascript apps with React JS',\n          priority: 'Low',\n          completed: false\n        },\n        {\n          title: 'Learn Node',\n          description: 'Build great modularize javascript apps with React JS',\n          priority: 'Medium',\n          completed: false\n        }\n      ],\n      openNewTodo: false\n    }\n  }\n\n  updateTaskState(tasks) {\n    this.setState({\n      tasks: tasks\n    });\n  }\n\n  toggleTodoHandler(state) {\n    this.setState({\n      openNewTodo: state\n    });\n  }\n\n  addNewTodoHandler(data) {\n    const { tasks } = this.state;\n    tasks.push(data);\n    this.updateTaskState(tasks);\n    this.toggleTodoHandler(false);\n  }\n\n  deleteTaskHandler(index) {\n    const { tasks } = this.state;\n    tasks.splice(index, 1);\n    this.updateTaskState(tasks);\n  }\n\n  removeCompletedTaskHandler(index) {\n    const { tasks } = this.state;\n    tasks[index].completed = false;\n    this.updateTaskState(tasks);\n  }\n\n  addCompletedTaskHandler(index) {\n    const { tasks } = this.state;\n    tasks[index].completed = true;\n    this.updateTaskState(tasks);\n  }\n\n  render() {\n    const { tasks, openNewTodo } = this.state;\n\n    return (\n      <div className=\"App\">\n\n        {/* Header of the app */}\n        <Header />\n\n        {/* Section of the app */}\n        <section className=\"todo-list-container\">\n          <div className=\"todo-in-progress\">\n            <h2> Working tasks</h2>\n            <ul onDragStart={() => { console.log('on drag called') }} className=\"todo-list\" id=\"target\">\n\n              {/* Warning Task */}\n              {\n                tasks.map((task, index) => {\n                  // setting index as  a key is not a good way\n                  if (!task.completed) {\n                    return <Task\n                      task={task}\n                      key={index}\n                      deleteTaskHandler={() => { this.deleteTaskHandler(index) }}\n                      addCompletedTaskHandler={() => { this.addCompletedTaskHandler(index) }}\n                    />\n                  }\n                })\n              }\n\n              {/* To add new todo task */}\n              <li className=\"todo-item new\">\n                <div className=\"card\" onClick={() => this.toggleTodoHandler(true)}>\n                  <h3 className=\"todo-title\"> <span className=\"action\">\n                    <i className=\"complete material-icons md-36 md-light\">add_circle_outline</i>\n                  </span>\n                    <span className=\"title\">ADD A TODO</span></h3>\n                </div>\n              </li>\n\n              {/* New Task creator form pop up */}\n              <AddTask\n                openNewTodo={openNewTodo}\n                toggleTodoHandler={this.toggleTodoHandler.bind(this)}\n                addNewTodoHandler={this.addNewTodoHandler.bind(this)}\n              />\n\n            </ul>\n          </div>\n\n          {/* completed todo task of app */}\n          <div className=\"todo-completed\">\n            <ul className=\"todo-list-completed\">\n              <h2> Completed Tasks </h2>\n              {\n                tasks.map((task, index) => {\n                  if (task.completed) {\n                    return <CompletedTask\n                      completedTask={task}\n                      key={index}\n                      removeCompletedTaskHandler={this.removeCompletedTaskHandler.bind(this, index)}\n                    />\n                  }\n                })\n              }\n            </ul>\n          </div>\n        </section>\n\n        {/* Footer of the app */}\n        <Footer />\n      </div>\n    )\n  }\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}